---

name: Release

on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - "*"

jobs:

  prepare:
    runs-on: ubuntu-latest
    outputs:
      artifact-version: ${{ steps.set-version.outputs.artifact-version }}
      release: ${{ steps.set-version.outputs.release }}
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set version
        id: set-version
        run: |
          if [[ "$GITHUB_EVENT_NAME" == 'push' && "$GITHUB_REF_TYPE" == 'tag' ]]; then
            artifact_version=${GITHUB_REF_NAME}
            release=true
          else
            artifact_version='test'
            release=false
          fi
          printf 'Artifact version: %s\n' "$artifact_version"
          printf 'artifact-version=%s\n' "$artifact_version" >> "$GITHUB_OUTPUT"
          printf 'Release: %s\n' "$release"
          printf 'release=%s\n' "$release" >> "$GITHUB_OUTPUT"
      - name: Set matrix
        id: set-matrix
        run: |
          matrix=$(jq -Mcs \
            --arg filter "^${INPUT_TARGETS:-.*}$" \
            '{include: [.[] | select(.target|test($filter))]}' \
            <<<'
              {"target": "i686-linux-gnu-shared", "runs-on": "ubuntu-latest"}
              {"target": "i686-linux-gnu-static", "runs-on": "ubuntu-latest"}
              {"target": "x86_64-linux-gnu-shared", "runs-on": "ubuntu-latest"}
              {"target": "x86_64-linux-gnu-static", "runs-on": "ubuntu-latest"}
              {"target": "i686-linux-musl-shared", "runs-on": "ubuntu-latest"}
              {"target": "i686-linux-musl-static", "runs-on": "ubuntu-latest"}
              {"target": "x86_64-linux-musl-shared", "runs-on": "ubuntu-latest"}
              {"target": "x86_64-linux-musl-static", "runs-on": "ubuntu-latest"}
              {"target": "i686-windows-msvc-shared-md", "runs-on": "windows-2019"}
              {"target": "i686-windows-msvc-static-md", "runs-on": "windows-2019"}
              {"target": "i686-windows-msvc-static-mt", "runs-on": "windows-2019"}
              {"target": "x86_64-windows-msvc-shared-md", "runs-on": "windows-2019"}
              {"target": "x86_64-windows-msvc-static-md", "runs-on": "windows-2019"}
              {"target": "x86_64-windows-msvc-static-mt", "runs-on": "windows-2019"}
              '
          )
          printf 'Matrix: %s\n' "$(jq <<< "$matrix")"
          printf 'matrix=%s\n' "$matrix" >> "$GITHUB_OUTPUT"
        env:
          INPUT_TARGETS: ${{ inputs.targets }}

  build:
    needs: prepare
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
    runs-on: ${{ matrix.runs-on }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.checkout-branch }}
          submodules: true
      - name: Build
        run: ./tools/build-release.sh "$BUILD_TARGETS"
        shell: bash
        env:
          BUILD_TARGETS: ${{ matrix.target }}
          LIBMEM_BUILD_OUT_DIR: out/libmem-${{ needs.prepare.outputs.artifact-version }}-${{ matrix.target }}
          MSYS: 'winsymlinks:sys' # fix symlink issues when cloning on Windows
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: libmem-${{ needs.prepare.outputs.artifact-version }}-${{ matrix.target }}
          path: out/libmem-${{ needs.prepare.outputs.artifact-version }}-${{ matrix.target }}.tar.gz
